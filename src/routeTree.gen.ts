/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as OnboardImport } from './routes/onboard'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ClientsImport } from './routes/clients'
import { Route as IndexImport } from './routes/index'
import { Route as ClientsCreateImport } from './routes/clients_.create'
import { Route as ClientsIdEditImport } from './routes/clients_.$id.edit'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const OnboardRoute = OnboardImport.update({
  id: '/onboard',
  path: '/onboard',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ClientsRoute = ClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ClientsCreateRoute = ClientsCreateImport.update({
  id: '/clients_/create',
  path: '/clients/create',
  getParentRoute: () => rootRoute,
} as any)

const ClientsIdEditRoute = ClientsIdEditImport.update({
  id: '/clients_/$id/edit',
  path: '/clients/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/onboard': {
      id: '/onboard'
      path: '/onboard'
      fullPath: '/onboard'
      preLoaderRoute: typeof OnboardImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/clients_/create': {
      id: '/clients_/create'
      path: '/clients/create'
      fullPath: '/clients/create'
      preLoaderRoute: typeof ClientsCreateImport
      parentRoute: typeof rootRoute
    }
    '/clients_/$id/edit': {
      id: '/clients_/$id/edit'
      path: '/clients/$id/edit'
      fullPath: '/clients/$id/edit'
      preLoaderRoute: typeof ClientsIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/onboard': typeof OnboardRoute
  '/signup': typeof SignupRoute
  '/clients/create': typeof ClientsCreateRoute
  '/clients/$id/edit': typeof ClientsIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/onboard': typeof OnboardRoute
  '/signup': typeof SignupRoute
  '/clients/create': typeof ClientsCreateRoute
  '/clients/$id/edit': typeof ClientsIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/onboard': typeof OnboardRoute
  '/signup': typeof SignupRoute
  '/clients_/create': typeof ClientsCreateRoute
  '/clients_/$id/edit': typeof ClientsIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/clients'
    | '/dashboard'
    | '/onboard'
    | '/signup'
    | '/clients/create'
    | '/clients/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/clients'
    | '/dashboard'
    | '/onboard'
    | '/signup'
    | '/clients/create'
    | '/clients/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/clients'
    | '/dashboard'
    | '/onboard'
    | '/signup'
    | '/clients_/create'
    | '/clients_/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRoute
  DashboardRoute: typeof DashboardRoute
  OnboardRoute: typeof OnboardRoute
  SignupRoute: typeof SignupRoute
  ClientsCreateRoute: typeof ClientsCreateRoute
  ClientsIdEditRoute: typeof ClientsIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRoute,
  DashboardRoute: DashboardRoute,
  OnboardRoute: OnboardRoute,
  SignupRoute: SignupRoute,
  ClientsCreateRoute: ClientsCreateRoute,
  ClientsIdEditRoute: ClientsIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clients",
        "/dashboard",
        "/onboard",
        "/signup",
        "/clients_/create",
        "/clients_/$id/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clients": {
      "filePath": "clients.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/onboard": {
      "filePath": "onboard.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/clients_/create": {
      "filePath": "clients_.create.tsx"
    },
    "/clients_/$id/edit": {
      "filePath": "clients_.$id.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
